Date: Tue, 26 Nov 1996 19:16:34 GMT
Server: Apache/1.1.1
Content-type: text/html
Content-length: 15418
Last-modified: Mon, 18 Nov 1996 06:16:54 GMT


CIS 629: Computer Architecture, Fall 1996





CIS 629: Computer Architecture

Fall 1996

Instructor:
Allen D. Malony

URL: http://www.cs.uoregon.edu/classes/cis629/


Computer architecture is the science and art of selecting and
interconnecting hardware components to create a computer that meets
functional, performance and cost goals.
This course qualitatively and quantitatively examines computer design
tradeoffs.
Our focus will be on processor architectures, memory systems, and
multiprocessor machines.
In particular, we will study:
instruction-level parallelism (super-pipelining and super-scalar
aRISC processor design);
memory hierarchies, cache systems, and coherency mechanisms; and
multiprocessor architectures and parallel computing.


Announcements


Instructor


Lecture


Required Text


Reference Text


Readings


Lecture Notes


Homeworks


Examinations


Programming


Project


Grading


Approximate Schedule


Tutorials


Tools


Miscellanea


Academic Misconduct


Class Roster



Announcements



10/1: Required text is available in the bookstore.
10/1: Readings packet 1 is available in the bookstore.
10/2: Please read papers 1-4 in readings packet 1.
10/7: Please read paper 5 in readings packet 1.
10/22: Please read papers 6, 7, and 8 in readings packet 1.
11/15: Please read cache coherence papers in readings packet 2.
11/15: Please read STiNG paper in readings packet 2.
11/15: Please do assignment describe in the Programming section.


Instructor

Allen D. Malony

Office:	307 Deschutes Hall
Email:	malony@cs.uoregon.edu
Office hours:	Monday/Wednesday, 11:00-12:00 or by appointment

Lecture

Time:		Tuesday/Thursday, 14:00 - 15:20
Place:	135 Gilbert Hall

Required Text

Harold S. Stone,
High-Performance Computer Architecture,
Third Edition, Addison-Wesley, 1993.

Reference Text

John L. Hennessy and David A. Patterson,
Computer Architecture: A Quantitative Approach
,
Morgan Kaufmann Publishers, Second Edition, 1996.

Readings


1.
Selected Readings --
Background and Processor Design

2. Selected Readings -- Memory System Architectures
3. Selected Readings -- Multiprocessor Architectures
Each part of the course will be accompanied by a set of papers from the
computer architecture literature.
The reading packets will be available in the bookstore.
Lecture Notes
Lecture notes will be made available as they are developed.
See links in schedule.
Homework
There will be two homework assignments.
Many problems will require the review of material that is touched upon,
but not covered in depth in class.
Assignments will be due in class on the due date.
NO LATE ASSIGNMENTS WILL BE ACCEPTED, except under extreme non-academic
circumstances discussed with the instructor at least one week before the
assignment is due.


Homework 1
;
Figure 3.10
and
Figure 3.44
;
Errata
;
Solutions
.
Homework 2: This has been combined with the programming assignment.

Examinations


Midterm
: Takehome, Oct. 31 (Halloween); Due: Nov. 5
Please advise me of any conflicts with these likely exam times before
the end of the second week of classes.
Programming
The topic of the programming assignment is cache simulation.
The programming assigment is combined with the second homework assignment.
There are two parts.
Part 1.
Run the following trace files through the Dinero cache
simulator.  Use the Dinero server found in this WEB page.

cc1 - found in Dinero server options
spice - found in Dinero server options
tex - found in Dinero server options
Show results for different levels of cache size (unified and split),
associativity, and block sizes.  Explain the results that you see.
Part 2.
The following sample code models an 8 Kbyte, direct-mapped cache with
32-byte lines (blocks) (2^5).  It treats reads and writes in the samewas,
as a simple "reference".  Included is only the routine that checks for a
reference in the cache and accummulates total references and misses.  Not
included are the I/O routines to read in a reference trace (assuming it
comes from a file or stdio) and to produce output statistics.
#include
#include
#define CACHE_SIZE 8192
#define BLOCK_SHIFT 5

long tags[CACHE_SIZE >> BLOCK_SHIFT];
long references=0, misses=0;

void Reference(long address)
{
int index = (address & (CACHE_SIZE-1)) >> BLOCK_SHIFT;
long tag = address >> BLOCK_SHIFT;

if (tags[index] != tag) {
misses++;
tags[index] = tag;
}
references++;
}
a. Add necessary I/O support (as briefly described) to the code above to
make this into a cache simulation program that takes a reference
trace file.
b. Write a routine to model a 2-way and a 4-way set associative cache of
the same size.
c. Demonstrate the operation of all three simulators with three programs
of your own choosing.  That is, find or write three programs (they
can be simple) from which you can capture address references to
drive your simulators. (One thought is to get three Linpack
codes.) Note, you need to modify the programs to capture references;
concentrate only on data references.
This assignment will be due on Dec. 3.
Term Project
The term project will be to write a paper that surveys an area within
computer architecture.
The paper should:

summarize work in an area, giving extensive references (6 at least)
present opinions of others for or against various options
(again, with references)
conclude with your opinion of the strengths and weaknesses of
the arguments given
You will be graded on the completeness of your survey, the accuracy of your
summaries, and the support you give for your opinions.

Some possible survey topics are:

compiler transformations to improve memory behavior,
superscalar & superpipelined processors vs. VLIW
effect on architecture of changing technology (you might consider
different types of technology)
high-performance I/O (e.g., for storage or network communication)
contrast of state-of-the-art processors
massively parallel processing systems
scalable architecture technologies
some aspect of the history of computer architecture
The topic chosen should be something that you are particularly interested
in.

There are many references for papers including:

Proc. of the Int'l. Symposium on Computer Architecture (ISCA)
Proc. of the Conf. on Architectural Support for Programming
Languages and Operating Systems (ASPLOS)
Int'l. Conf. on Parallel Processing (ICPP)
Supercomputing Conf.
Int'l. Conf. on Supercomputing (ICS)
IEEE Trans. on Computers
ACM Trans. on Computer Systems
IEEE Computer

Grading


20% Homework
30% Midterm
20% Programming
30% Term Project

Approximate Schedule



Date

Topic

Assignment



Oct. 1

Introduction

Chapter 1



Oct. 3

Performance costs

Chapter 1; Readings



Oct. 8

Pipelining

Chapter 3; Readings



Oct. 10

Pipelining (continued)

Chapter 3; Readings



Oct. 15

Instruction Level Parallelism (ILP)*

Chapter 3; Readings; Tutorial



Oct. 22

ILP: Overcoming Data Hazards

Chapter 3; Readings; Tutorial



Oct. 24

ILP: Reducing Branch Penalties

Chapter 3; Readings; Tutorial



Oct. 29

ILP: Superscalar

Tutorial



Oct. 31

ILP: Limits

TAKEHOME MIDTERM



Nov. 5

Cache Systems

Chapter 2



Nov. 7

Cache Systems

Chapter 2; Readings



Nov. 12

Memory Systems

Chapter 6, Section 6.4 and 6.5; Readings



Nov. 14

Multiprocessor Systems

Chapter 6, Chapter 7; Readings



Nov. 19

No Class

Work on Project



Nov. 21**

Cache Coherent Memory Systems

Chapter 6: Readings



Nov. 25***

The Sequent STiNG architecture

Readings: Sequent STiNG paper



Nov. 26

Multiprocessor Architectures

Trip to Sequent



Nov. 28

THANKSGIVING

THANKSGIVING



Dec. 3

Multiprocessor Architectures

Chapter 6: Readings



Dec. 5

Multiprocessor Architectures

Chapter 6: Readings



Dec. 9

PROJECT DUE

PROJECT DUE



*   This class will be taught by John Conery.
**  This class will be taught by Jan Cuny.
*** This is a Monday makeup class.

Tutorials


Prof. Driscoll, Portland State University, has developed an online

Tutorial on Superscalar Microprocessor Design
.
Each student must work through the "expert" level of the tutorial.

Tools



Wisconsin Architectural Research Tool Set (WARTS)
.
WARTS will, hopefully, be available for project use.

A Dinero Server (Dinero by Remote)
.
Dinero is a C-based cache simulation program that is provided as
part of WARTS.

MINT
: a fast program-driven simulator for multiprocessor systems.
MINT will be available for project use.


Instruction-Level Simulation And Tracing
- This contains a huge list of simulators, emulators, and tracing tools,
including an extensive bibliography as well as list of people to contact.

Miscellanea



Computer Architecture
Home Page
.
The WWW Computer Architecture Page was designed at the University
of Wisconsin, Madison, to act as a central repository of links
pointing to information relevant to computer architecture
researchers and students.  It contains pointers to over seventy
major architecture research groups and projects, most major
computer architecture- related conferences, industrial pages,
organizations, and news groups and a selection of miscellaneous
links of interest to computer architects.
Usenet newsgroup for computer architecture
(
comp.arch
).

ACM
Special Interest Group on Computer Architecture
(SIGARCH)


CPU Info Center
- info on current/future processors.

The
Performance Database
Server.

Benchmarks FAQ
- from the newsgroup
comp.benchmarks
.

SPEC benchmarks
-  SPEC92/SPEC95 benchmark suite from the
Standard Performance Evaluation Corporation
.


Academic Misconduct



University
of Oregon's student conduct code
.

Student
Academic Integrity
.
A brochure put out by the UO Dean of Students.

Class Roster

Al-Fudhail, Maan		alaalove@cs.uoregon.edu
Appayya, Vimala		vimala@cs.uoregon.edu
Fiskio-Lasseter, Jo		johnfl@cs.uoregon.edu
Galli, Mark			mgalli@cs.uoregon.edu
Gao, Yi			ygao@cs.uoregon.edu
Lindlan, Kathleen		klindlan@cs.uoregon.edu
Ma, Chia-Cha		chiache@cs.uoregon.edu
Palsule, Prachi		pvp@cs.uoregon.edu
Pusca, Lornel		ionel@cs.uoregon.edu
Reimer, Yolanda		yreimer@cs.uoregon.edu
Robertson, Chad		carober@cs.uoregon.edu
Sai, Teck			tecks@cs.uoregon.edu
Sather, Jim			jims@cs.uoregon.edu
Sheth, Sai			saisheth@cs.uoregon.edu
Skidmore, Jenifer		skid@cs.uoregon.edu
Svitak, John		svitak@cs.uoregon.edu
Wang, Chien-Chung		chien@cs.uoregon.edu
Wang, Zhunqin		zhunqinw@cs.uoregon.edu
Xiao, Yong			xiao@cs.uoregon.edu
Xue, Jianzhong		xue@cs.uoregon.edu
Yang, Shuang		sqyang@cs.uoregon.edu
Yao, Lixing			ylixing@cs.uoregon.edu



