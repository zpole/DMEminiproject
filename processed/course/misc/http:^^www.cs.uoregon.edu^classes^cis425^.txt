Date: Tue, 26 Nov 1996 19:16:57 GMT
Server: Apache/1.1.1
Content-type: text/html
Content-length: 6311
Last-modified: Mon, 18 Nov 1996 16:50:45 GMT


cis 425 Principle of Programming Languages



CIS425: Principle of Programming Languages





Instructor and GTF


Textbook and packets


Grade policy


Exams


Course objetives


Schedule


Announcements


Lectures


Assignments



Instructor and GTF


Instructor: Zena Ariola, Room 305, x6-4448, ariola@cs,
http://www.cs.uoregon.edu/~ariola

Office hours: 11-12 UH or by-appointment

GTF: Yong Xiao, Room 230, x6-1383, xiao@cs.
Office hours: 13-14 M, 14:30-15:30W or by-appointment

Tutorial hours:17-18U, DES200


Textbook and Packets


Textbook:
Programming Languages, Concepts and Constructs
, by Ravi Sethi, Addison-Wesley, 1995.

Packets: 1. Introduction to Standard ML; 2. Lecture Notes


Grading Policy:

Written assignments (6) will account for 30% of the grade.
The midterm will count 30%, the final examination 40%.
Problem sets are to be solved in groups of two or three,
and due in class (one copy per group)  on the day indicated on the
problem set handout.


Midterm and Final Exams


Midterm Exam: Nov. 7, 9:30am, Esslinger 107.


Final Exam: Dec. 9, 10:15am, Willamette Hall 110.



Course Objectives:

The main goal of this course is to introduce you
to the different aspects of programming languages,
including their features, type systems, programming style, and
implementation. We will consider
th traditional programming languages,
such as C and Pascal, and more recent languages, such
as, ML and Java.  You will not become an expert programmer in
the languages taught in this class. However, you will
gain the necessary skills to understand the impact of
language features on both the implementation and
the abstractions they provide.
For example, you will be able to understand why Java has gained so
much interest in both the academic and industrial arena.

We will cover different programming paradigms. Each paradigm provides
a different way to solve a problem.
As part of the assignments you will
be required to program in C++, ML and Prolog.

More specifically, the topics covered are:


Compilation vs Interpretation:
advantages and disadvantages
in terms of speed of execution and memory space.
Overview of the structure of a compiler.

Syntax:
what are the legal expressions. Concepts:
Context free grammars - BNF grammars - Parse trees and
ambiguity - Abstract syntax trees - Lexical analyzer -
Parser

Imperative programming (Cobol, Fortran,C, Pascal, Ada):
This
is the closest model to the machine architecture. Concepts:
Side-effects - Types (static and dynamic, weak and strong) -
Scope (static and dynamic) - Parameter passing techniques
(call-by-value, call-by-refence, call-by-value-result, call-by-name) -
Aliasing - Block-structured languages -
Run-time structures ( Stacks vs heap) - Garbage collection

Object-oriented programming (C++, Java, Eiffel):
Support for programming in-the-lage. Concepts:
Abstraction - Encapsulation - Information hiding - Inheritance -
Subtyping

Functional programming (Scheme,ML,Haskell,Miranda,Id,Gopher):
Based on mathematics which gives a theoretical foundation.
Concepts:
Strict vs non-strict functions -
Higher-order functions -
Currying -
Lazy vs eager evaluation -
Innermost vs outermost evaluation -
Type inference - Type checking -  Overloading - Coercion - Polymorphism -
Pattern matching

Logic programming (Prolog):
Important as database query languages.
Concept:
Relations vs functions -
Facts and Rules - Goals - Unification - Backtracking - Cuts
If time allows us we will also study the current techniques for
specifying the semantics (i.e. the meaning) of a programming language.
You need to master these techniques if you want to
reason about properties of your programs.


Schedule



Introduction




Tuesday
10/1, Introduction, Ch. 1

Thursday
10/3, Compilers vs Interpreter, Ch. 2-3.3

Tuesday
10/8, Syntactic structure


Imperative programming




Thursday
10/10, Control abstraction, Data abstraction, Ch. 3, 4

Tuesday
10/15, Types

Thursday
10/17, Parameter Passing Techniques, Ch. 5

Tuesday
10/22, Storage Management

Thursday
10/24,
Scope rules



Object-oriented programming




Tuesday
10/29, Abstraction, Ch. 6

Thursday
10/31, Encapsulation, Ch. 7 - except 7.7

Tuesday
11/5, Information hiding

Thursday
11/7, Java


Functional programming




Tuesday
11/12, Features of Functional languages, Ch. 8

Thursday
11/14, Typed language:
ML
, Ch. 9 - Packet 1.

Tuesday
11/19, Polymorphism in ML,
Types and exceptions


Thursday
11/21, Untyped language:
Scheme
, Ch. 10

Tuesday
11/26, Data same as programs


Logic programming




Tuesday
12/3, Logic + control, Ch. 11

Thursday
12/5, Prolog




Maintainer of this page:
Yong Xiao
email:
xiao@cs.uoregon.edu


