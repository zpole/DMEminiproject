Date: Monday, 25-Nov-96 21:50:31 GMT
Server: NCSA/1.1
MIME-version: 1.0
Content-type: text/html
Last-modified: Wednesday, 10-Jan-96 21:41:33 GMT

Patricia J. Teller


Patricia J. Teller, Assistant Professor





New Mexico State University


Department of Computer Science

Science Hall, Room 123
Stewart and Sweet Streets
Las Cruces, New Mexico 88003-8001


teller@cs.nmsu.edu
http://www.cs.nmsu.edu/~teller
505-646-6243



Pat received her B.A., M.S., and Ph.D. from
New York University
.  Her Ph.D.
advisers were Drs.
Allan Gottlieb
and
Ralph Grishman
.  She is a member of
Phi Beta Kappa and an honorary member of the Golden Key National Honor
Society.  Before joining NMSU, Teller was a visiting researcher at IBM
T. J. Watson Research Center.  Dr. Teller's main research interests are
parallel and distributed computing, computer architecture, operating systems,
and performance evaluation.  These research interests are the main focus
of her Parallel Research Group at NMSU.  Dr. Teller's research has been
funded by Sandia National Laboratories, the U. S. Army Research Office, and
Los Alamos National Laboratory. Teller is a reviewer for major conferences
and journals and has been on the program committee of several major
conferences.  She has been invited to speak at various workshops, conferences,
universities, and industrial centers.
The Performance Research Group (PRG) at NMSU includes five of Pat's Ph.D.
candidates,
Keith Bisset
,
Shaun Cooper
,
Hugo Molina-Salgado
,
Richard Oliver
,
and Qidong Xu (now working at IBM));
two of her Master's candidates,
Ward McGregor
) and
Rob Sinclair
); and
several other students including Ph.D. candidates
Jen-Long Chen
); and
Heather Pfeiffer
); and
Master's candidate
Federico Bassetti
); and
and Bachelor's candidate, Praveen Mamnani.


VITA


PUBLICATIONS (this section is under construction)

Unscheduled traces and shared-memory multiprocessor simulation,"
Patricia J. Teller,
NMSU Technical Report NMSU-CSTR-9426, 1995.

Abstract.  Trace-driven simulation of shared-memory architectures can be as
accurate as execution- or program-driven simulations for a large class of
parallel programs. Traces for programs in this class can be scheduled or
unscheduled. A scheduled trace is a set of traces generated by running a
parallel program on a real or simulated MP, while an unscheduled trace is an
augmented trace generated by running a parallel program on a uniprocessor.
Scheduled traces can be used to drive simulations of only MP systems with the
same number of processors as the MP that generated the trace and are limited
to the same static task-to-processor scheduling as the MP that generated the
trace. In contrast, unscheduled traces offer much more flexibility. In this
paper we show how unscheduled traces can be used to simulate dynamic task-to-
processor scheduling, MP systems of different sizes, and multiprogramming. In
addition, we show how an unscheduled trace allows the task granularity of a
traced program to be varied from simulation to simulation and how operating
system references can be inserted dynamically during simulation.


CS579 Simulation of Computer Architectures

.
CS579 is a special topics course for graduate students.  The course will
cover research in the area of simulation of computer architectures, both
uniprocessor and multiprocessors architectures.
You can examine the syllabus of the course, lecture notes, and
papers that are being analyzed by the students, among other things.

CS273 Course Materials

CS273 is a course in Machine Organization and Assembly Language.  This course is described in "Mobile robots teach machine-level programming",
which will appear in the proceedings of Supercomputing '95.  Course materials,
including transparencies and a MC68HC11 simulator with a graphical user
interface
will be available at this WWW site during or before December 1995.
The following lecture notes are available for your perusal:

Motivational lectures, which include ...
;
Templates for converting high-level
language programming constructs into low-level (assembly) language constructs.
;
Lecture on implementation of stacks.
;
Click
here
to
see a description of the reading that
has been assigned in the course.
For the fall 1995, click
here
to access the assignments that have been
assigned thus far.
More to come .....
