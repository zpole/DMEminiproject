Date: Wed, 08 Jan 1997 20:35:15 GMT
Server: NCSA/1.4.2
Content-type: text/html


CSE 531 Bboard/Mail Log



CSE 531 - Automata, Computability, and Complexity
Bboard/E-Mail Log
Fall 1996
Below is a log of all email sent to the class mailing list
cse531@cs
.  We will use this list for announcements of
general interest to the class.  Students should also feel free
to use it to ask questions, post information, or initiate
discussions  of general interest to the class.  Of course,
questions or comments that don't seem of general interest can be
directed to the
TA         (
nitin@cs
) or
instructor (
ruzzo@cs
),
instead.
Following usual Internet conventions, administrative requests
concerning the mailing list itself, such as add/delete/address
change requests, should be addressed to
cse531-request@cs
.
Index of Messages
(Latest message Monday, 21-Oct-96 21:58:33 PDT.)


10 Oct 96 nitin@june ____ A question regarding homework

13 Oct 96 nitin@june ____ homework #1

13 Oct 96 nitin@june ____ Re: homework #1

14 Oct 96 kayee@cs ______ Re: homework #1

14 Oct 96 nitin@june ____ Re: cse531

16 Oct 96 nitin@june ____ Re: Subset construction's optimality

16 Oct 96 dewey@cs ______ Re: Subset construction's optimality

16 Oct 96 gjb@cs ________ Re: Subset construction's optimality

21 Oct 96 ruzzo@cs ______ hw#2

21 Oct 96 ruzzo@cs ______ Course Web




Messages


From:
nitin@june (Nitin Sharma)
Subject:
A question regarding homework
To: dewey@june (Brian K Dewey), cse531@june
Date: Thu, 10 Oct 1996 12:37:25 -0700 (PDT)
>
> From: Brian K Dewey <dewey@scoter.cs.washington.edu>
>
> I'm obviously misinterpreting the third problem in homework one, because --
> under my interpretation -- the answer is trivial...  Here's the way I read the
> question:
>
> Let N(n) be the set of all NFAs with n states.  We must find a function f(n)
> such that *no* NFA in N(n) has an equivalent DFA containing fewer than f(n)
> states.
>
> If that's the case:  isn't it trivial to show that one can construct an NFA
> with n states that accepts sigma star (e.g. n states, fully connected, all
> states are final)?  And that n-state NFA has an equivalent DFA with one state.
>  Thus, f(n) = 1.
>

Not quite.  The problem doesn't ask you to find f(n) s.t. no NFA
in N(n) has an equivalent DFA containing fewer than f(n) states.

You are asked to find f(n) s.t. there is *some* n-state NFA which has
NO equivalent DFA with fewer than f(n) states.

And you have to find the largest such function.

So, the answer f(n) = 1, satisfies the first condition, but it is not
the largest such function.

Also, since Pumping lemma has not been covered yet, and the hint
suggests using an idea like in the proof of Pumping lemma, it makes
sense to extend the deadline a bit.

So, HW1 is NOT DUE BEFORE Thursday, Oct. 17.

-nitin
From:
nitin@june (Nitin Sharma)
Subject:
homework #1
To: cse531@june
Date: Sun, 13 Oct 1996 17:22:50 -0700 (PDT)
Hi!,

Some of you had asked me about what lemmas and theorems referred to
in problems 1.10, 1.11 and 1.13 actually are.

Lemma 1.27 referred to in problem 1.10 contains the proof for showing the
construction of NFAs for regular expressions.

has NFA's for
i) R = a.
ii) R= epsilon
iii) R= phi
iv) R = R1 + R2
v) R = R1.R2 and
6) R = R1*

Lemma 1.29 contains the construction of Reg Exprs for FA's.
Uses Kleene's approach.

Compute Rij(n) = Rij(n-1) +   Rik(n-1). Rkk(n-1)* Rkj(n-1)

for all i,j. Union of R1m(n), m in F gives the desired expression.

Thm 1.17 shows the equivalence of DFA's and NFA's using Subset
Construction.

Since Sipser text is not out yet, Hopcroft Ulman's text is a
good substitute for these topics as the Sipser's treatment is
quite similar to H&U's.

If some of you still find any problem, let me know. I can get
you copies of the relevant sections of the text.

-nitin
From:
nitin@june (Nitin Sharma)
Subject:
Re: homework #1
To: ambrose@cs.washington.edu (Bret Ambrose)
Date: Sun, 13 Oct 1996 23:08:23 -0700 (PDT)
Cc: cse531@june
>
> Hi,
>
> Problem 1.10(b) is improperly parenthesized.  Depending on where you put
> the needed parantheses, you get two different expressions.
> How should we interpret this?

Thanks for pointing this out.

It should read as:

( ((00)* 11) + 01 )*

-nitin
Date: Mon, 14 Oct 1996 09:14:04 -0700 (PDT)
From:
Ka Yee Yeung <kayee@cs.washington.edu>
To: Nitin Sharma <nitin@cs.washington.edu>
cc: cse531@cs.washington.edu
Subject:
Re: homework #1

Hey everybody,

Sipser is now in the bookstore.  :)

Ka Yee
--------------------------------------------------------------------------
Say Hello to others. You will have a happier day.
--------------------------------------------------------------------------
From:
nitin@june (Nitin Sharma)
Subject:
Re: cse531
To: kayee@june.cs.washington.edu (Ka Yee Yeung)
Date: Mon, 14 Oct 1996 13:09:15 -0700 (PDT)
Cc: cse531@june
>
> I think you'll have office hour today at 3:30. Where will you be for office
> hour?

In case I forgot to tell, all my office hours are to be in 326-A Sieg.

-nitin
From:
nitin@june (Nitin Sharma)
Subject:
Re: Subset construction's optimality
To: gjb@sturgeon.cs.washington.edu (Greg Badros)
Date: Wed, 16 Oct 1996 17:00:49 -0700 (PDT)
Cc: cse531@june
>
> To paraphrase the other question about the question posed on the HW, I,
> too, must be missing something obvious, because I'd think the family of
> NFA-s the question mentions (nth character from end is a "1") is a n+1
> state NFA which can't be reduced to a DFA w/ fewer than 2^(n+1) states,
> so f(n) can be as big as is possibly could be; that is, f(n) = n^2.

It requires a proof, of course.
But that will prove f(n) = 2^n, and not n^2.

But it is not clear (to me at least) that 2^(n+1) states bound can
be proven for this example. (Be careful with constant factors!)

I think a slightly lower bound could be proven, but even that is
not trivial.

Note that you have to *prove* that *no* DFA with states < f(n) can
accept this set (nth symbol from the right is a '1')

If you find it tough, come up with as high a lower bound on f(n) as you
can.

-nitin
To: cse531@cs
Subject:
Re: Subset construction's optimality
<199610170000.RAA15729@june.cs.washington.edu>
Date: Wed, 16 Oct 1996 17:08:44 PDT
From:
Brian K Dewey <dewey@scoter.cs.washington.edu>

To throw in my own two cents.

> >
> > To paraphrase the other question about the question posed on the HW, I,
> > too, must be missing something obvious, because I'd think the family of
> > NFA-s the question mentions (nth character from end is a "1") is a n+1
> > state NFA which can't be reduced to a DFA w/ fewer than 2^(n+1) states,
> > so f(n) can be as big as is possibly could be; that is, f(n) = n^2.

Actually, isn't the n-th character from the end a "1" set of languages a set
that requires n+1 states in an NFA, but 2^n states in a DFA?

>
>  It requires a proof, of course.
>  But that will prove f(n) = 2^n, and not n^2.
>

I'm a little perplexed by what you mean by that last sentence.

>    I think a slightly lower bound could be proven, but even that is
>  not trivial.

I certainly hope a slightly lower bound can be proven --- that's what I'm
attempting to do!  Blatant advertisement for collaboration:  who's been
working on this problem and making headway?  I'd love to bounce ideas off
someone late tonight/sometime tomorrow...
Date: Wed, 16 Oct 1996 18:24:20 -0700 (PDT)
From:
Greg Badros <gjb@cs.washington.edu>
To: Brian K Dewey <dewey@scoter.cs.washington.edu>
cc: cse531@cs.washington.edu
Subject:
Re: Subset construction's optimality

On Wed, 16 Oct 1996, Brian K Dewey wrote:

> To throw in my own two cents.
>
> > >
> > > To paraphrase the other question about the question posed on the HW, I,
> > > too, must be missing something obvious, because I'd think the family of
> > > NFA-s the question mentions (nth character from end is a "1") is a n+1
> > > state NFA which can't be reduced to a DFA w/ fewer than 2^(n+1) states,
> > > so f(n) can be as big as is possibly could be; that is, f(n) = n^2.
I mistyped here                                               ^^^^^^^^^^^

>
> Actually, isn't the n-th character from the end a "1" set of languages a set
> that requires n+1 states in an NFA, but 2^n states in a DFA?

It seems like the 1th (last) character from the end = "1" would require
only 2 = 2^1 states, so I think you're right.  Computational complexity
theory sure encourages off-by-one errors! :-)

>
> >
> >  It requires a proof, of course.
> >  But that will prove f(n) = 2^n, and not n^2.
> >
>
> I'm a little perplexed by what you mean by that last sentence.

I just mistyped f(n) = n^2 instead of 2^n.  He was correcting my mistake.

Good luck with your proof.

Greg
Date: 21 Oct 1996 10:38 PDT
From:
Larry Ruzzo <ruzzo@quinault.cs.washington.edu>
To: cse531@cs
Subject:
hw#2

For those of you who can't wait to get started, here's your next
homework.  I'll have a paper copy to hand out tomorrow.

531 Homework \#2
Due Tuesday, 10/29.

In all problems below requiring you to construct a machine or
greammar (e.g., 1.27, 2.4, 2.5, 2.17), {\em explain\/} your
construction in English, in addition to providing a correctness
proof if requested.  E.g., you might want to say something like
``in my grammar, variable A generates a string of zero or more
0's, and variable B generates strings of balanced parens...''
These problems are otherwise extremely difficult to read (and
grade!)
\begin{enumerate}
\item Text 1.14(b,c).
\item Text 1.27.
\item Text 1.28.
\item Text 2.4(e).
\item Text 2.5(e).
\item Text 2.17(a).
\item Text 2.19.  Give an informal argument for (b).
\item
Let $M=(\Q,\Sigma,\Gamma,\delta,q_{0},F)$ be a PDA.
\begin{enumerate}
\item Explain how it might be possible that there is
a string $w \in L(M)$ on which $M$ has
arbitrarily long accepting computations.  I.e.,
there is no integer $t$ such that all accepting
computations of $M$ on $w$ use fewer than $t$
steps.  Furthermore, explain how that could
happen even if $M$ never repeats a configuration
during its accepting computation.
\item However, prove that there is a constant $c$
such that every $w \in L(M)$ is accepted by
{\em some\/} computation of length at most
$c(n+1)$, where $n=|w|$.  Give an upper bound on
$c$ in terms of $|Q|$, $|\Sigma|$, $|\Gamma|$,
etc.
\end{enumerate}
\end{enumerate}
Date: 21 Oct 1996 21:55 PDT
From:
Larry Ruzzo <ruzzo@quinault.cs.washington.edu>
To: cse531@cs
Subject:
Course Web

I've finally set up a course web page.  Usual URL:
http://www.cs.washington.edu/education/courses/531/96a

It includes office hours, a log of all class email, handouts,
Sipser's errata page, etc.



cse531-webmaster@cs.washington.edu
(Last Update:
10/21/96)


